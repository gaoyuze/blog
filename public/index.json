[{"categories":["编程语言","数据处理"],"content":"在进行数据分析之前，需要对数据进行处理，即根据需求对数据进行增，删，改，查。在R语言中基础包中，subset(), which(), merge()等函数进行数据处理。除此之外，dplyr包中的filter(), inner_join()等函数也可以实现相同的功能，，由于dplyr包接受data.frame对象，且运行速度很快，因此使用也十分广泛。具体示例如下。 ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:0:0","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"1.单表操作 基础表格如下。 id \u003c- c(1, 2, 3, 4, 5, 6, 7) age \u003c- c(32, 18, 23, 57, 15, 22, 55) score \u003c- c(85, 70, 90, 77, 95, 85, 85) df \u003c- data.frame( id = id, age = age, score = score ) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:1:0","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"1.1筛选 其中filter()速度最快，subset()速度最慢。 # 基础包 df.1 \u003c- subset(df,) df.1 \u003c- df[df$score \u003e 80,] df.1 \u003c- df[which(df$score \u003e 80),] # dplyr library(dplyr) df.1 \u003c- filter(df, score \u003e 80) # 多条件查询 df.1 \u003c- filter(df, score \u003e 80 \u0026 score \u003c 90) df.1 \u003c- filter(df score \u003e 80) %\u003e% filter(socre \u003c 90) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:1:1","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"1.2group_by dplyr包中的group_by()能够进行分组计算，在实际中也经常用到。示例代码如下。 library(dplyr) df.1 \u003c- group_by(df, score) df.2 \u003c- summarize(df.1, count = n(), age.mean = round(mean(score),2), age.min = min(age), age.max = max(age), age.sum = sum(age) ) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:1:2","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"2.双表操作 基础表格如下： city \u003c- c(beijing, shanghai, guangzhou, shenzhen ) province \u003c- c(beijing, shanghai, guangdong, guangdong) id \u003c- c(1, 2, 3, 4) df.1 \u003c- data.frame( id = id; city = city ) df.2 \u003c- data.frame( id = id; province = province ) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:2:0","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"2.1拼接 表格的拼接可以认为是两个或多个表格的行\\列合并，这里以行合并为例，常用的有两种方法，一种是R语言基础包中的rbind()，另一种是dplyr包中的bind_rows()，速度rbind() \u003e bind_rows()，原因是rbind()在拼接时不检查元素每列的元素类型是否相同。示例代码如下。合并列也类似，函数为cbind(), bind_cols()。 在合并行的时候需要保证列数相同，在合并列的时候要保证行数相同。 #方法1 rbind(df.1, df.2) #方法2 library(dplyr) bind_rows(df.1, df.2) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:2:1","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"2.2交集，并集，差集 library(dplyr) # 交集 df.3 \u003c- intersect(df.1, df.2) #差集 df.1 - df2 df.3 \u003c- setdiff(df.1, df.2) #并集（去重复） df.3 \u003c- union(df.1, df.2) #并集（不去重复） df.3 \u003c- union_all(df.1, df.2) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:2:2","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"2.3连接（join） 常用的连接分为3种，分别是内连接、左连接，右连接。常用的方法有两种，分别是R语言基础包中的merge()函数与dplyr包中的inner_join()函数。速度后者略快于前者。 library(dplyr) # 内连接 df.3 \u003c- inner_join(df.1, df.2, by = c(\"city\" = \"province\")) df.4 \u003c- merge(df.1, df.2, by.x = \"city\"， by.y = \"province\", sort = FALSE) # 左连接 df.3 \u003c- left_join(df.1, df.2, by = \"ID\") df.4 \u003c- merge(df.1, df.2, by.x = \"city\"， by.y = \"province\", sort = FALSE, all.x = TRUE) # 右连接 df.3 \u003c- right_join(df.1, df.2, by = \"ID\") df.4 \u003c- merge(df.1, df.2, by.x = \"city\"， by.y = \"province\", sort = FALSE, all.y = TRUE) # 全连接 df.3 \u003c- full_join(df.1, df.2, by = c(\"city\" = \"province\")) df.4 \u003c- merge(df.1, df.2, by.x = \"city\"， by.y = \"province\", sort = FALSE, all = TRUE) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:2:3","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"2.4补充：dplyr中的管道函数 这里补充一个知识点dplyr中的管道函数%\u003e%，意思是将%\u003e%左边的对象传递给右边的函数，作为第一个选项的设置（或剩下唯一一个选项的设置）。使用管道函数能够精简代码，提高可读性。具体使用方法如下。 a %\u003e% f(b)等同于f(a, b) b %\u003e% f(a, ., c)等同于f(a, b, c) ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:2:4","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言","数据处理"],"content":"3.参考 https://zhuanlan.zhihu.com/p/31465569 https://blog.csdn.net/neweastsun/article/details/79435271 https://www.jianshu.com/p/c65dbce983dd https://blog.csdn.net/wlt9037/article/details/74421916 ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/:3:0","tags":["R语言"],"title":"R语言之数据处理","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"categories":["编程语言"],"content":"1.读数据 R语言的读写有read.csv(), read.table(), fread()。经过测试读写速度为fread() \u003e read.table() \u003e read.csv()。fread()速度快的原因是其在底层使用多核并行读取。 代码示例如下： # read.csv mydata \u003c- read.csv(\"data.csv\", header = T, stringsAsFactors = FALSE, check.names = FALSE) # read.table mydata \u003c- read.table(\"data.csv\", header = T, sep=\",\", quote=\"\\\"\", skipNul=TRUE, stringsAsFactors=FALSE, comment.char=\"\") # fread # select表示要读取的列的向量，可以是下标，也可以是列名 library(data.table) mydata \u003c- fread(\"data.csv\", header = TRUE, select=c(1, 2, 3)) 可以通过文件指针来对超大文件进行分批读取 con = file(\"data.csv\", \"w\") # 读取列名 col.name \u003c- read.table(con, header = FALSE, sep=\",\", quote=\"\\\"\", skipNul=TRUE, stringsAsFactors=FALSE, nrows = 1) # 分10次读取，每次读取1000000行 for i in range(10) { df \u003c- read.csv(con, header = FALSE, sep=\",\", quote=\"\\\"\", skipNul=TRUE, stringsAsFactors=FALSE, comment.char=\"\", nrows = num) if(nrow(df) == 0) { break } } close(con) 读数据函数中的各项含义为： header：第一行是否为列名 sep：数据的分隔符。默认情况为“\"\"。 quote：用于指定包围字符型数据的字符。 nrows：从文件中读取的最大行数。 skip：读取数据时忽略的行数。 encoding：字符串的编码方式 stringsAsFactors：是否将字符向量转换为因子。 comment.char：逻辑值。该参数值设置为TRUE时，数据框中的变量名将会被检查。 check.names：逻辑值。该参数值设置为TRUE时，数据框中的变量名将会被检查。 skipNul：是否忽略空值，默认为FALSE。 ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/:1:0","tags":["R语言"],"title":"R语言之数据读写","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/"},{"categories":["编程语言"],"content":"2.写数据 RDS文件是以R本机格式存储R对象，相比于其他格式文件，二进制更紧凑，读写速度快。也可以将多个对象以 RData 格式保存到一个单一的文件。其读写如下： # RDS文件的读取与写入 df \u003c- reasRDS(“data.rds”) # RDS 格式中写入单个数据对象 saveRDS(df,filename) # RData文件保存与载入 # 将多个对象以 RData 格式保存到一个单一的文件 df1 \u003c- df save(df, df1, file=\"data.RData\") # load() 载入数据，R 会自动使用该数据原来的对象名称，在本例中，会自动载入df与df1 load(\"data.RData\") 除此之外，还可以将文件写如为csv, txt等格式，这里以写入csv格式为例，进行示范。 # row.names = FALSE 不显示行名 # na = \"\" 替代 “NA”，输出空格 write.csv(data, \"data.csv\", row.names = FALSE, na = \"\") ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/:2:0","tags":["R语言"],"title":"R语言之数据读写","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/"},{"categories":["编程语言"],"content":"3.参考 https://openbiox.github.io/Cookbook-for-R-Chinese/section-5.html ","date":"2021-01-24","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/:3:0","tags":["R语言"],"title":"R语言之数据读写","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/"},{"categories":["编程语言"],"content":"R语言是Ross Ihaka和Robert Gentlemanat在新西兰奥克兰大学于1996年发起的一个项目，并且由1976年贝尔实验室的S语言发展而来。目前于R语言常用于统计分析，绘图，数据挖掘。 获取R的地址：http://cran.r-project.org/，国内镜像为：https://mirrors.tuna.tsinghua.edu.cn/CRAN/。 R语言常用IDE为RStudio，下载地址为：https://rstudio.com/products/rstudio/。 ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:0:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"1.基础 这里首先列举一些常用语法，之后解释了遇到的一些问题。 推荐的变量命名：China.City, ThisIsAFunction, i。 ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:1:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"1.1基本运算 整除：%/% 整除取余：%% 索引：[],$ 判断元素是否在向量中，返回布尔值%in% 矩阵乘法：%*% 数学函数：exp(), log(), log10(), sqrt() 取整函数：四舍五入取整round(n)，向上取整ceiling(n)，向下取整floor(n)。round(n,m)表示对n保留m位小数进行四舍五入。 常用语句如下： a \u003c- 1 b \u003c- \"aaa\" #输出 print(a) # 1 #拼接 paste(a, b) # \"1 aaa\" paste(a, b, collapse=\",\") # \"1,aaa\" paste0(a, b) # \"1aaa\" ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:1:1","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"1.2常见疑惑 \u003c-，\u003c\u003c-与=的区别 在大多数语言中=作用有两个赋值和传参，但在R语言中\u003c-的作用只有赋值并且创建对象，且该箭头方向为双向（可向右赋值-\u003e）。如果同时存在，优先据\u003c-高于=。由于\u003c-的可读性好，故R语言中一般使用\u003c-。 \u003c\u003c-表示全局赋值，可在函数中向全局变量赋值，与\u003c-类似，也可向右进行赋值 ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:1:2","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"2.数据结构 基本常用数据类型有：数值型（numeric）、逻辑性（logical）、字符型（character）、复数型（complex）、原味型（raw）、缺省型（missing value）。 数据对象有：向量（vector）、矩阵（matrix）、数组（array）、列表（list）、数据框（data.frame）、因子（factor）。 下文是常用的代码示例： # charactor a \u003c- \"study\" # 分割 substr(a, 1, 2) # \"st\" # 长度 nchar(a) # 5 # vector #常用函数：length() x \u003c- c(1,2,3,4,5) x \u003c- 1:5 # 1 2 3 4 5 与 x \u003c- seq(1,5) 等价 x \u003c- rep(1, 5) # 1 1 1 1 1 x \u003c- seq(1, 10, 2) # 1 3 5 7 9 # list 列表 # 创建一个列表，包含了字符串、向量和数字 list_data \u003c- list(\"runoob\", \"google\", c(11,22,33), 123, 51.23, 119.1) # 给列表元素设置名字 names(list_data) \u003c- c(\"Sites\", \"Numbers\", \"Lists\") # matrix #常用函数：行数与列数dim(), 逆矩阵solve(), 转置矩阵t() M \u003c- matrix(c(3:14), nrow = 4, byrow = TRUE) #元素按行排列 N \u003c- matrix(c(3:14), nrow = 4, byrow = FALSE) #元素按列排列 P \u003c- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames)) # dimnames可以定义列名与行名 # array, matrix其实就是一个二维数组 vector1 \u003c- c(5,9,3) vector2 \u003c- c(10,11,12,13,14,15) # 创建3行3列的2维数组 result \u003c- array(c(vector1,vector2),dim = c(3,3,2), dimnames = list(row.names,column.names,matrix.names)) # data.frame (初始化，v1与v2为其中的列) df \u003c- data.frame{ col1 = v1, col2 = v2 } #选取第一列 df[1,] #选取第一行 df[,1] ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:2:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"3.基本语法 R语言与Python不同，需要通过{}来进行代码块的分割，在R语言中next类似与其他语言中的continue。 代码示例如下： # switch # expression是一个常量表达式，可以是整数或字符串，如果是整数则返回对应的 case 位置值，如果整数不在位置的范围内则返回 NULL # 如果是字符串，则对应的是 case 中的变量名对应的值，没有匹配则没有返回值。 # 如果匹配到多个值则返回第一个。 switch( expression, case1, case2, case3....) #循环 for (i in 1:10) { print(i) } #函数 function_name \u003c- function(arg.1, arg.2, ...) { expressions; } ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:3:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"4.高效原则 随着数据的海量增加，对于数据的处理效率能够市数据。在编程过程中通过一些简单技巧，就可以使程序的执行效率有显著的提高， R语言能够直接对向量进行运算，所以尽量避免使用for循环，可以通过apply(), foreach()来等价替换。 在使用向量时最高能够提前分配好大小，而不是动态添加。 使用R语言中并行包parallel, foreach, doParallel来处理数据。 通过 rm() 将对象从内存中及时释放。 ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:4:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":["编程语言"],"content":"5.参考 https://zh.wikipedia.org/wiki/R%E8%AF%AD%E8%A8%80 https://zhuanlan.zhihu.com/p/27339301 https://www.runoob.com/r/r-tutorial.html ","date":"2021-01-22","objectID":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/:5:0","tags":["R语言"],"title":"R语言之基础","uri":"/r%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%9F%BA%E7%A1%80/"},{"categories":null,"content":"Yuze Gao(高宇泽) Yuze Gao (Zayn) is a PH.D student in Department of Computer Science and Technology, Tsinghua University now. ","date":"2020-09-23","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Education 2020.9 - Present, Tsinghua University, Computer Science and Technology, Ph.D. 2017.9 - 2020.6, Peking University, Computer Softwore and Theory, M.S. 2012.9 - 2016.6, Beijing Institute of Technology, Software Engineering, B.S. ","date":"2020-09-23","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Research AI in Healthcare and Medical ","date":"2020-09-23","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Honor 2018.12 Award for Academic Excellents, Peking University. 2018.12 Shenzhen Stock Exchange Scholarship, Peking University. ","date":"2020-09-23","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Publication [1] Yuze Gao, Jiangshao Gu, Ying Shi, Haibo Wang, Ting Chen, Qian Di, Association of short-term exposure to ambient fine particle matter with hospital admission risks and costs in China, a case-crossover study, Global Transitions, Volume 5, 2023, Pages 40-49 ","date":"2020-09-23","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":["标记语言"],"content":"Markdown是一种轻量级的标记语言，创始人为John Gruber，其允许人们使用易读易写的纯文本格式编写文档。本文将对其语法进行简单的说明。 Typora是一款非常好用的markdown编辑器，方便快捷，可以直接下载使用，地址为：https://www.typora.io/ ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:0:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"1.标题 文字前边加几个#代表几级标题（需要用空格隔开），在标题下一行加任意多个=为一级标题，加任意多个-为二级标题 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:1:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"2.列表 无序列表，用-, +, *都可以 第一点 第二点 第三点 有序列表，用 1. 2. 第一点 第二点 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:2:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"3.引用 引用，用\u003e 来表示, \u003e后5个空格表示代码块格式 这是一段引用 二级引用 三级引用 int main(){ printf(\"hello world\") } ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:3:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"4.字体 两个*或_代表加粗，一个*或_代表斜体，~~代表删除 加粗 加粗 斜体 斜体 删除 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"5.图片 ! + [ 图片地址 ] + ( 图片链接 ) 图片的链接也可以仿照下边 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"6.链接 行内式 [ 被链接文字 ] + ( 地址 ) 参考式 [ 被链接文字 ] + [ A ] ，在其他地方定义 [ A ]: aaaa 自动链接 用\u003c\u003e括号括起来 新浪的网址是： 新浪 english sina http://www.sina.com ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:6:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"7.代码块 行内代码使用两个``标识，可嵌入文字中 代码块使用4个空格或```标识，语法高亮，在后边写上语言即可 我的代码是#include “stdio.h”，你的呢？ import time ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:7:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"8.表格 对齐样式： 居左：:— 居中：:—: 居右：—: 标题 标题 标题 文本1 文本2 文本3 文本1111111 文本2222222 文本3333333 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:8:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"9.分隔线 在一行中用三个以上的*,-,_来建立一个分隔线，行内不能有其他东西 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:9:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"10.换行 用两个空格换行 第一行 第二行 ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:10:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"11.脚注 这是脚注11 这是脚注2[_2] ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:11:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["标记语言"],"content":"12.和html标签有关的符号 字体及字体颜色和大小 字体颜色 使用html标签\u003cbr/\u003e换行 居左文本 居中文本 居右文本 下划线文本 这是脚注111 [_2]:这也是脚注222 ↩︎ ","date":"2019-01-17","objectID":"/markdown%E8%AF%AD%E6%B3%95/:12:0","tags":["Markdown"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"}]